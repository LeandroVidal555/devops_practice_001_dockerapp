name: Dev Build & Push

on:
  # We'll only push image when the dev pushes a vX.Y.Z tag
  push:
    tags: ['v*.*.*']

permissions:
  id-token: write
  contents: read

env:
  APP_NAME: "dp-001-app"
  IMAGE: ${{ secrets.ECR_REGISTRY }}/dp-001-app
  GITOPS_REPO: "LeandroVidal555/devops_practice_001_kubernetes"

jobs:
  build-and-push:
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version & enforce rules
        id: get_version
        run: |
          TAG="${GITHUB_REF_NAME}" # e.g. v1.2.3

          # Ensure tag's commit is reachable from dev
          git fetch origin dev --quiet
          TAG_SHA="$(git rev-parse "refs/tags/${TAG}^{commit}")"

          if git merge-base --is-ancestor "$TAG_SHA" "origin/dev"; then
            echo "Tag $TAG is on dev history ✅"
            echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG is NOT on dev history ❌"
            exit 1
          fi

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GA_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to DEV ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: "${{ env.IMAGE }}:${{ steps.get_version.outputs.version }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Checkout GitOps repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          ref: main
          token: ${{ secrets.K8S_GA_PAT }}
          path: gitops

      - name: Update image tag in GitOps repo
        working-directory: gitops
        run: |
          NEW_IMAGE="${{ env.IMAGE }}:${{ steps.get_version.outputs.version }}"
          FILE="dev/services/hello-world-lmv/deployment.yml"

          echo "Whole file BEFORE PERL"
          cat $FILE

          # Replace only the dp-001-app image line (safer than a global 'image:' swap)
          perl -0777 -pe 's|(^\s*image:\s*)\Q${{ env.IMAGE }}\E:[0-9]+\.[0-9]+\.[0-9]+|\1'"$NEW_IMAGE"'|m' -i "$FILE"

          echo "Whole file AFTER PERL"
          cat $FILE

          echo "Replaced image line:"
          grep -n 'image:' "$FILE"



      #- name: Create PR in GitOps repo
      #  uses: peter-evans/create-pull-request@v6
      #  with:
      #    token: ${{ secrets.K8S_GA_PAT }}
      #    path: gitops
      #    commit-message: "dev: ${{ env.APP_NAME }} → ${{ steps.get_version.outputs.version }}"
      #    branch: "newversion-${{ env.APP_NAME }}-${{ steps.get_version.outputs.version }}"
      #    base: main
      #    title: "dev: ${{ env.APP_NAME }} → ${{ steps.get_version.outputs.version }}"
      #    body: "Update dev image: ${{ env.IMAGE }}:${{ steps.get_version.outputs.version }}"